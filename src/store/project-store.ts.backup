import { create } from 'zustand'
import { immer } from 'zustand/middleware/immer'\nimport { persist } from 'zustand/middleware'\nimport type {\n  Project,\n  LayoutConfiguration,\n  TileSpecification,\n  ProjectCalculations,\n  ProjectWizardStep,\n  Unit,\n  LayoutShape,\n  LayoutPattern\n} from '@/types'\n\ninterface ProjectState {\n  // Current project being created/edited\n  currentProject: Partial<Project>\n  \n  // Wizard state\n  wizardSteps: ProjectWizardStep[]\n  currentStep: number\n  \n  // Saved projects\n  savedProjects: Project[]\n  \n  // UI state\n  isLoading: boolean\n  error: string | null\n}\n\ninterface ProjectActions {\n  // Project management\n  createNewProject: () => void\n  saveProject: () => void\n  loadProject: (projectId: string) => void\n  deleteProject: (projectId: string) => void\n  updateProjectName: (name: string) => void\n  \n  // Wizard navigation\n  nextStep: () => void\n  previousStep: () => void\n  goToStep: (stepIndex: number) => void\n  completeStep: (stepIndex: number) => void\n  \n  // Layout configuration\n  setLayoutShape: (shape: LayoutShape) => void\n  setLayoutDimensions: (length: number, width: number, unit: Unit) => void\n  setLayoutPattern: (pattern: LayoutPattern) => void\n  \n  // Tile configuration\n  setTileSpecification: (tile: TileSpecification) => void\n  \n  // Calculations\n  calculateProject: () => void\n  setCalculations: (calculations: ProjectCalculations) => void\n  \n  // Utility\n  resetProject: () => void\n  setError: (error: string | null) => void\n  setLoading: (loading: boolean) => void\n}\n\nconst initialWizardSteps: ProjectWizardStep[] = [\n  {\n    id: 'layout-selection',\n    title: 'Layout Selection',\n    description: 'Choose your room layout type',\n    completed: false,\n    current: true\n  },\n  {\n    id: 'dimensions',\n    title: 'Dimensions',\n    description: 'Enter room measurements',\n    completed: false,\n    current: false\n  },\n  {\n    id: 'tile-selection',\n    title: 'Tile & Grout',\n    description: 'Select tile size and grout width',\n    completed: false,\n    current: false\n  },\n  {\n    id: 'pattern-selection',\n    title: 'Layout Pattern',\n    description: 'Choose tiling pattern',\n    completed: false,\n    current: false\n  },\n  {\n    id: 'results',\n    title: 'Results',\n    description: 'View calculations and preview',\n    completed: false,\n    current: false\n  }\n]\n\nconst initialProject: Partial<Project> = {\n  name: 'New Tiling Project',\n  layout: {\n    shape: 'rectangle',\n    dimensions: {\n      length: 0,\n      width: 0,\n      unit: 'm'\n    },\n    pattern: 'grid'\n  },\n  tile: {\n    length: 300,\n    width: 300,\n    unit: 'mm',\n    groutWidth: 2\n  }\n}\n\nexport const useProjectStore = create<ProjectState & ProjectActions>()(\n  persist(\n    immer((set, get) => ({\n      // Initial state\n      currentProject: initialProject,\n      wizardSteps: initialWizardSteps,\n      currentStep: 0,\n      savedProjects: [],\n      isLoading: false,\n      error: null,\n\n      // Project management actions\n      createNewProject: () => {\n        set((state) => {\n          state.currentProject = {\n            ...initialProject,\n            id: crypto.randomUUID(),\n            createdAt: new Date(),\n            updatedAt: new Date()\n          }\n          state.wizardSteps = initialWizardSteps\n          state.currentStep = 0\n          state.error = null\n        })\n      },\n\n      saveProject: () => {\n        set((state) => {\n          const project = state.currentProject as Project\n          if (!project.id) return\n\n          project.updatedAt = new Date()\n          const existingIndex = state.savedProjects.findIndex(p => p.id === project.id)\n          \n          if (existingIndex >= 0) {\n            state.savedProjects[existingIndex] = project\n          } else {\n            state.savedProjects.push(project)\n          }\n        })\n      },\n\n      loadProject: (projectId: string) => {\n        set((state) => {\n          const project = state.savedProjects.find(p => p.id === projectId)\n          if (project) {\n            state.currentProject = { ...project }\n            state.currentStep = 4 // Go to results\n            state.wizardSteps = state.wizardSteps.map((step, index) => ({\n              ...step,\n              completed: index < 4,\n              current: index === 4\n            }))\n          }\n        })\n      },\n\n      deleteProject: (projectId: string) => {\n        set((state) => {\n          state.savedProjects = state.savedProjects.filter(p => p.id !== projectId)\n        })\n      },\n\n      updateProjectName: (name: string) => {\n        set((state) => {\n          state.currentProject.name = name\n        })\n      },\n\n      // Wizard navigation\n      nextStep: () => {\n        set((state) => {\n          const currentStep = state.currentStep\n          if (currentStep < state.wizardSteps.length - 1) {\n            state.wizardSteps[currentStep].completed = true\n            state.wizardSteps[currentStep].current = false\n            state.currentStep = currentStep + 1\n            state.wizardSteps[currentStep + 1].current = true\n          }\n        })\n      },\n\n      previousStep: () => {\n        set((state) => {\n          const currentStep = state.currentStep\n          if (currentStep > 0) {\n            state.wizardSteps[currentStep].current = false\n            state.currentStep = currentStep - 1\n            state.wizardSteps[currentStep - 1].current = true\n          }\n        })\n      },\n\n      goToStep: (stepIndex: number) => {\n        set((state) => {\n          if (stepIndex >= 0 && stepIndex < state.wizardSteps.length) {\n            state.wizardSteps[state.currentStep].current = false\n            state.currentStep = stepIndex\n            state.wizardSteps[stepIndex].current = true\n          }\n        })\n      },\n\n      completeStep: (stepIndex: number) => {\n        set((state) => {\n          if (stepIndex >= 0 && stepIndex < state.wizardSteps.length) {\n            state.wizardSteps[stepIndex].completed = true\n          }\n        })\n      },\n\n      // Layout configuration\n      setLayoutShape: (shape: LayoutShape) => {\n        set((state) => {\n          if (state.currentProject.layout) {\n            state.currentProject.layout.shape = shape\n          }\n        })\n      },\n\n      setLayoutDimensions: (length: number, width: number, unit: Unit) => {\n        set((state) => {\n          if (state.currentProject.layout) {\n            state.currentProject.layout.dimensions = { length, width, unit }\n          }\n        })\n      },\n\n      setLayoutPattern: (pattern: LayoutPattern) => {\n        set((state) => {\n          if (state.currentProject.layout) {\n            state.currentProject.layout.pattern = pattern\n          }\n        })\n      },\n\n      // Tile configuration\n      setTileSpecification: (tile: TileSpecification) => {\n        set((state) => {\n          state.currentProject.tile = tile\n        })\n      },\n\n      // Calculations\n      calculateProject: () => {\n        const state = get()\n        const { currentProject } = state\n        \n        if (!currentProject.layout || !currentProject.tile) return\n\n        // Import calculation utilities and perform calculations\n        // This will be implemented when we create the calculation utilities\n        set((draft) => {\n          draft.isLoading = true\n        })\n\n        // Simulate async calculation\n        setTimeout(() => {\n          set((draft) => {\n            draft.isLoading = false\n            // Set calculated results here\n          })\n        }, 500)\n      },\n\n      setCalculations: (calculations: ProjectCalculations) => {\n        set((state) => {\n          state.currentProject.calculations = calculations\n        })\n      },\n\n      // Utility\n      resetProject: () => {\n        set((state) => {\n          state.currentProject = initialProject\n          state.wizardSteps = initialWizardSteps\n          state.currentStep = 0\n          state.error = null\n        })\n      },\n\n      setError: (error: string | null) => {\n        set((state) => {\n          state.error = error\n        })\n      },\n\n      setLoading: (loading: boolean) => {\n        set((state) => {\n          state.isLoading = loading\n        })\n      }\n    })),\n    {\n      name: 'layitright-project-store',\n      partialize: (state) => ({ \n        savedProjects: state.savedProjects \n      })\n    }\n  )\n)