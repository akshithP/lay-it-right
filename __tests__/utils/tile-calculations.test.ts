import { calculateTilingProject, validateCalculationInputs, getRecommendedWastePercentage } from '@/utils/tile-calculations'\nimport type { LayoutConfiguration, TileSpecification } from '@/types'\n\ndescribe('Tile Calculations', () => {\n  const basicLayout: LayoutConfiguration = {\n    shape: 'rectangle',\n    dimensions: {\n      length: 5,\n      width: 4,\n      unit: 'm'\n    },\n    pattern: 'grid'\n  }\n\n  const basicTile: TileSpecification = {\n    length: 300,\n    width: 300,\n    unit: 'mm',\n    groutWidth: 3\n  }\n\n  describe('calculateTilingProject', () => {\n    it('should calculate basic rectangular room with square tiles', () => {\n      const result = calculateTilingProject({\n        layout: basicLayout,\n        tile: basicTile\n      })\n\n      expect(result).toMatchObject({\n        totalArea: 20, // 5m × 4m = 20m²\n        wastePercentage: 10\n      })\n      expect(result.totalTiles).toBeGreaterThan(0)\n      expect(result.fullTiles).toBeGreaterThan(0)\n      expect(result.coverage).toBeGreaterThan(0)\n      expect(result.coverage).toBeLessThanOrEqual(100)\n    })\n\n    it('should handle different tile sizes', () => {\n      const largeTile: TileSpecification = {\n        length: 600,\n        width: 600,\n        unit: 'mm',\n        groutWidth: 5\n      }\n\n      const result = calculateTilingProject({\n        layout: basicLayout,\n        tile: largeTile\n      })\n\n      expect(result.totalTiles).toBeLessThan(\n        calculateTilingProject({\n          layout: basicLayout,\n          tile: basicTile\n        }).totalTiles\n      )\n    })\n\n    it('should apply waste percentage correctly', () => {\n      const result10 = calculateTilingProject({\n        layout: basicLayout,\n        tile: basicTile,\n        wastePercentage: 10\n      })\n\n      const result20 = calculateTilingProject({\n        layout: basicLayout,\n        tile: basicTile,\n        wastePercentage: 20\n      })\n\n      expect(result20.totalTiles).toBeGreaterThan(result10.totalTiles)\n      expect(result20.wastePercentage).toBe(20)\n    })\n\n    it('should handle brick pattern with more waste', () => {\n      const brickLayout: LayoutConfiguration = {\n        ...basicLayout,\n        pattern: 'brick'\n      }\n\n      const gridResult = calculateTilingProject({\n        layout: basicLayout,\n        tile: basicTile\n      })\n\n      const brickResult = calculateTilingProject({\n        layout: brickLayout,\n        tile: basicTile\n      })\n\n      // Brick pattern should have more cut tiles\n      expect(brickResult.cutTiles).toBeGreaterThanOrEqual(gridResult.cutTiles)\n    })\n\n    it('should throw error for unsupported layouts', () => {\n      const customLayout: LayoutConfiguration = {\n        ...basicLayout,\n        shape: 'custom'\n      }\n\n      expect(() => {\n        calculateTilingProject({\n          layout: customLayout,\n          tile: basicTile\n        })\n      }).toThrow('Only rectangular layouts are currently supported')\n    })\n  })\n\n  describe('validateCalculationInputs', () => {\n    it('should pass validation for valid inputs', () => {\n      const errors = validateCalculationInputs({\n        layout: basicLayout,\n        tile: basicTile\n      })\n\n      expect(errors).toHaveLength(0)\n    })\n\n    it('should catch invalid room dimensions', () => {\n      const invalidLayout: LayoutConfiguration = {\n        ...basicLayout,\n        dimensions: {\n          ...basicLayout.dimensions,\n          length: 0\n        }\n      }\n\n      const errors = validateCalculationInputs({\n        layout: invalidLayout,\n        tile: basicTile\n      })\n\n      expect(errors).toContain('Room length must be greater than 0')\n    })\n\n    it('should catch invalid tile dimensions', () => {\n      const invalidTile: TileSpecification = {\n        ...basicTile,\n        length: -10\n      }\n\n      const errors = validateCalculationInputs({\n        layout: basicLayout,\n        tile: invalidTile\n      })\n\n      expect(errors).toContain('Tile length must be greater than 0')\n    })\n\n    it('should catch negative grout width', () => {\n      const invalidTile: TileSpecification = {\n        ...basicTile,\n        groutWidth: -1\n      }\n\n      const errors = validateCalculationInputs({\n        layout: basicLayout,\n        tile: invalidTile\n      })\n\n      expect(errors).toContain('Grout width cannot be negative')\n    })\n\n    it('should catch tiles larger than room', () => {\n      const largeTile: TileSpecification = {\n        length: 10,\n        width: 5,\n        unit: 'm', // 10m × 5m tile in 5m × 4m room\n        groutWidth: 0\n      }\n\n      const errors = validateCalculationInputs({\n        layout: basicLayout,\n        tile: largeTile\n      })\n\n      expect(errors.length).toBeGreaterThan(0)\n      expect(errors.some(error => error.includes('larger than room'))).toBe(true)\n    })\n  })\n\n  describe('getRecommendedWastePercentage', () => {\n    it('should return correct waste percentages for each pattern', () => {\n      expect(getRecommendedWastePercentage('grid')).toBe(10)\n      expect(getRecommendedWastePercentage('brick')).toBe(15)\n      expect(getRecommendedWastePercentage('herringbone')).toBe(20)\n    })\n  })\n})