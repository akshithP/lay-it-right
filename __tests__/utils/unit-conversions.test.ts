import { \n  convertUnit, \n  convertArea, \n  normalizeToMm, \n  convertFromMm,\n  formatWithUnit,\n  getUnitPrecision,\n  isMetricUnit,\n  isImperialUnit\n} from '@/utils/unit-conversions'\n\ndescribe('Unit Conversions', () => {\n  describe('convertUnit', () => {\n    it('should convert meters to centimeters', () => {\n      expect(convertUnit(1, 'm', 'cm')).toBe(100)\n      expect(convertUnit(2.5, 'm', 'cm')).toBe(250)\n    })\n\n    it('should convert centimeters to millimeters', () => {\n      expect(convertUnit(1, 'cm', 'mm')).toBe(10)\n      expect(convertUnit(30, 'cm', 'mm')).toBe(300)\n    })\n\n    it('should convert inches to millimeters', () => {\n      expect(convertUnit(1, 'in', 'mm')).toBeCloseTo(25.4, 1)\n      expect(convertUnit(12, 'in', 'mm')).toBeCloseTo(304.8, 1)\n    })\n\n    it('should convert feet to meters', () => {\n      expect(convertUnit(1, 'ft', 'm')).toBeCloseTo(0.3048, 4)\n      expect(convertUnit(10, 'ft', 'm')).toBeCloseTo(3.048, 3)\n    })\n\n    it('should return same value for same unit', () => {\n      expect(convertUnit(5, 'm', 'm')).toBe(5)\n      expect(convertUnit(100, 'mm', 'mm')).toBe(100)\n    })\n  })\n\n  describe('convertArea', () => {\n    it('should convert square meters to square centimeters', () => {\n      expect(convertArea(1, 'm', 'cm')).toBe(10000) // 1m² = 10,000cm²\n    })\n\n    it('should convert square feet to square inches', () => {\n      expect(convertArea(1, 'ft', 'in')).toBe(144) // 1ft² = 144in²\n    })\n\n    it('should return same value for same unit', () => {\n      expect(convertArea(25, 'm', 'm')).toBe(25)\n    })\n  })\n\n  describe('normalizeToMm and convertFromMm', () => {\n    it('should normalize various units to millimeters', () => {\n      expect(normalizeToMm(1, 'm')).toBe(1000)\n      expect(normalizeToMm(1, 'cm')).toBe(10)\n      expect(normalizeToMm(1, 'mm')).toBe(1)\n      expect(normalizeToMm(1, 'in')).toBeCloseTo(25.4, 1)\n      expect(normalizeToMm(1, 'ft')).toBeCloseTo(304.8, 1)\n    })\n\n    it('should convert from millimeters back to units', () => {\n      expect(convertFromMm(1000, 'm')).toBe(1)\n      expect(convertFromMm(10, 'cm')).toBe(1)\n      expect(convertFromMm(1, 'mm')).toBe(1)\n      expect(convertFromMm(25.4, 'in')).toBeCloseTo(1, 1)\n      expect(convertFromMm(304.8, 'ft')).toBeCloseTo(1, 3)\n    })\n\n    it('should have round-trip consistency', () => {\n      const testCases = [\n        { value: 5, unit: 'm' as const },\n        { value: 300, unit: 'cm' as const },\n        { value: 1200, unit: 'mm' as const },\n        { value: 12, unit: 'in' as const },\n        { value: 3.5, unit: 'ft' as const }\n      ]\n\n      testCases.forEach(({ value, unit }) => {\n        const normalized = normalizeToMm(value, unit)\n        const converted = convertFromMm(normalized, unit)\n        expect(converted).toBeCloseTo(value, 6)\n      })\n    })\n  })\n\n  describe('formatWithUnit', () => {\n    it('should format numbers with units', () => {\n      expect(formatWithUnit(5.5, 'm')).toBe('5.5 m')\n      expect(formatWithUnit(100, 'mm')).toBe('100 mm')\n    })\n\n    it('should handle different decimal places', () => {\n      expect(formatWithUnit(5.123456, 'm', 2)).toBe('5.12 m')\n      expect(formatWithUnit(5.123456, 'm', 4)).toBe('5.1235 m')\n    })\n\n    it('should remove trailing zeros', () => {\n      expect(formatWithUnit(5.0, 'm')).toBe('5 m')\n      expect(formatWithUnit(5.10, 'm')).toBe('5.1 m')\n    })\n  })\n\n  describe('getUnitPrecision', () => {\n    it('should return appropriate precision for each unit', () => {\n      expect(getUnitPrecision('mm')).toBe(0)\n      expect(getUnitPrecision('cm')).toBe(1)\n      expect(getUnitPrecision('m')).toBe(2)\n      expect(getUnitPrecision('in')).toBe(2)\n      expect(getUnitPrecision('ft')).toBe(2)\n    })\n  })\n\n  describe('unit classification', () => {\n    it('should correctly identify metric units', () => {\n      expect(isMetricUnit('mm')).toBe(true)\n      expect(isMetricUnit('cm')).toBe(true)\n      expect(isMetricUnit('m')).toBe(true)\n      expect(isMetricUnit('in')).toBe(false)\n      expect(isMetricUnit('ft')).toBe(false)\n    })\n\n    it('should correctly identify imperial units', () => {\n      expect(isImperialUnit('in')).toBe(true)\n      expect(isImperialUnit('ft')).toBe(true)\n      expect(isImperialUnit('mm')).toBe(false)\n      expect(isImperialUnit('cm')).toBe(false)\n      expect(isImperialUnit('m')).toBe(false)\n    })\n  })\n})