"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_ssr_src_utils_tile-calculations_ts";
exports.ids = ["_ssr_src_utils_tile-calculations_ts"];
exports.modules = {

/***/ "(ssr)/./src/utils/tile-calculations.ts":
/*!****************************************!*\
  !*** ./src/utils/tile-calculations.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   calculateGroutArea: () => (/* binding */ calculateGroutArea),\n/* harmony export */   calculateLayoutArea: () => (/* binding */ calculateLayoutArea),\n/* harmony export */   calculatePolygonArea: () => (/* binding */ calculatePolygonArea),\n/* harmony export */   calculateProject: () => (/* binding */ calculateProject),\n/* harmony export */   calculateTilesByPattern: () => (/* binding */ calculateTilesByPattern),\n/* harmony export */   estimateProjectCost: () => (/* binding */ estimateProjectCost)\n/* harmony export */ });\n/* harmony import */ var _unit_conversions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./unit-conversions */ \"(ssr)/./src/utils/unit-conversions.ts\");\n\n/**\r\n * Calculate total area for different layout shapes\r\n */ function calculateLayoutArea(project) {\n    const { layout } = project;\n    if (!layout) return 0;\n    switch(layout.shape){\n        case \"rectangle\":\n        case \"square\":\n            return layout.dimensions.length * layout.dimensions.width;\n        case \"l-shape\":\n            // Simplified L-shape calculation - assume it's two rectangles\n            // In a real app, you'd have more detailed L-shape configuration\n            return layout.dimensions.length * layout.dimensions.width * 0.75;\n        case \"u-shape\":\n            // Simplified U-shape calculation\n            return layout.dimensions.length * layout.dimensions.width * 0.8;\n        case \"t-shape\":\n            // Simplified T-shape calculation\n            return layout.dimensions.length * layout.dimensions.width * 0.7;\n        case \"custom\":\n            if (layout.customLayout?.points) {\n                return calculatePolygonArea(layout.customLayout.points);\n            }\n            return 0;\n        default:\n            return 0;\n    }\n}\n/**\r\n * Calculate area of a polygon using the shoelace formula\r\n */ function calculatePolygonArea(points) {\n    if (points.length < 3) return 0;\n    let area = 0;\n    const n = points.length;\n    for(let i = 0; i < n; i++){\n        const j = (i + 1) % n;\n        area += points[i].x * points[j].y;\n        area -= points[j].x * points[i].y;\n    }\n    return Math.abs(area) / 2;\n}\n/**\r\n * Calculate number of tiles needed based on pattern\r\n */ function calculateTilesByPattern(roomArea, tileLength, tileWidth, groutWidth, pattern, unit) {\n    // Normalize all measurements to mm for consistent calculation\n    const roomAreaMm = (0,_unit_conversions__WEBPACK_IMPORTED_MODULE_0__.normalizeToMm)(roomArea, unit + \"\\xb2\");\n    const tileLengthMm = (0,_unit_conversions__WEBPACK_IMPORTED_MODULE_0__.normalizeToMm)(tileLength, unit);\n    const tileWidthMm = (0,_unit_conversions__WEBPACK_IMPORTED_MODULE_0__.normalizeToMm)(tileWidth, unit);\n    const groutWidthMm = (0,_unit_conversions__WEBPACK_IMPORTED_MODULE_0__.normalizeToMm)(groutWidth, unit);\n    // Calculate effective tile size including grout\n    const effectiveTileLength = tileLengthMm + groutWidthMm;\n    const effectiveTileWidth = tileWidthMm + groutWidthMm;\n    const effectiveTileArea = effectiveTileLength * effectiveTileWidth;\n    // Base calculation\n    let baseTilesNeeded = Math.ceil(roomAreaMm / effectiveTileArea);\n    // Pattern-specific adjustments\n    let wastePercentage;\n    let cutTileRatio;\n    switch(pattern){\n        case \"grid\":\n            wastePercentage = 5 // 5% waste for grid pattern\n            ;\n            cutTileRatio = 0.15 // 15% of tiles will need cutting\n            ;\n            break;\n        case \"brick\":\n            wastePercentage = 8 // 8% waste for brick/running bond\n            ;\n            cutTileRatio = 0.25 // 25% of tiles will need cutting\n            ;\n            baseTilesNeeded *= 1.05 // Slight increase for brick pattern\n            ;\n            break;\n        case \"herringbone\":\n            wastePercentage = 15 // 15% waste for herringbone (most complex)\n            ;\n            cutTileRatio = 0.4 // 40% of tiles will need cutting\n            ;\n            baseTilesNeeded *= 1.15 // Significant increase for herringbone complexity\n            ;\n            break;\n        default:\n            wastePercentage = 5;\n            cutTileRatio = 0.15;\n    }\n    const totalTiles = Math.ceil(baseTilesNeeded * (1 + wastePercentage / 100));\n    const cutTiles = Math.ceil(totalTiles * cutTileRatio);\n    const fullTiles = totalTiles - cutTiles;\n    return {\n        totalTiles,\n        fullTiles,\n        cutTiles,\n        wastePercentage\n    };\n}\n/**\r\n * Calculate grout area\r\n */ function calculateGroutArea(roomArea, tileLength, tileWidth, groutWidth, totalTiles, unit) {\n    // Normalize measurements\n    const tileLengthMm = (0,_unit_conversions__WEBPACK_IMPORTED_MODULE_0__.normalizeToMm)(tileLength, unit);\n    const tileWidthMm = (0,_unit_conversions__WEBPACK_IMPORTED_MODULE_0__.normalizeToMm)(tileWidth, unit);\n    const groutWidthMm = (0,_unit_conversions__WEBPACK_IMPORTED_MODULE_0__.normalizeToMm)(groutWidth, unit);\n    // Calculate tile area vs total area\n    const singleTileArea = tileLengthMm * tileWidthMm;\n    const totalTileArea = singleTileArea * totalTiles;\n    // Convert room area to mmÂ²\n    const roomAreaMm = (0,_unit_conversions__WEBPACK_IMPORTED_MODULE_0__.normalizeToMm)(roomArea, unit + \"\\xb2\");\n    // Grout area is the difference plus additional for joint intersections\n    const baseGroutArea = roomAreaMm - totalTileArea;\n    const jointIntersectionArea = totalTiles * (groutWidthMm * groutWidthMm);\n    return Math.max(0, baseGroutArea + jointIntersectionArea);\n}\n/**\r\n * Main calculation function for complete project\r\n */ function calculateProject(project) {\n    const { layout, tile } = project;\n    if (!layout?.dimensions || !tile) return null;\n    // Calculate total area\n    const totalArea = calculateLayoutArea(project);\n    if (totalArea <= 0) return null;\n    // Calculate individual tile area\n    const tileArea = tile.length / 1000 * (tile.width / 1000 // Convert mm to m for display\n    );\n    // Calculate tiles needed by pattern\n    const { totalTiles, fullTiles, cutTiles, wastePercentage } = calculateTilesByPattern(totalArea, tile.length, tile.width, tile.groutWidth, layout.pattern, layout.dimensions.unit);\n    // Calculate grout area\n    const groutArea = calculateGroutArea(totalArea, tile.length, tile.width, tile.groutWidth, totalTiles, layout.dimensions.unit);\n    // Calculate coverage percentage\n    const actualTileArea = fullTiles * tileArea;\n    const coverage = totalArea > 0 ? actualTileArea / totalArea * 100 : 0;\n    return {\n        totalArea: Number(totalArea.toFixed(2)),\n        tileArea: Number(tileArea.toFixed(6)),\n        totalTiles,\n        fullTiles,\n        cutTiles,\n        wastePercentage,\n        groutArea: Number((0,_unit_conversions__WEBPACK_IMPORTED_MODULE_0__.convertFromMm)(groutArea, layout.dimensions.unit).toFixed(2)),\n        coverage: Number(coverage.toFixed(1))\n    };\n}\n/**\r\n * Estimate project cost (basic calculation)\r\n */ function estimateProjectCost(totalTiles, tilePrice, groutArea, groutPricePerSqM = 10) {\n    const tileCost = totalTiles * tilePrice;\n    const groutCost = groutArea * groutPricePerSqM;\n    const totalCost = tileCost + groutCost;\n    return {\n        tileCost: Number(tileCost.toFixed(2)),\n        groutCost: Number(groutCost.toFixed(2)),\n        totalCost: Number(totalCost.toFixed(2))\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./src/utils/tile-calculations.ts\n");

/***/ }),

/***/ "(ssr)/./src/utils/unit-conversions.ts":
/*!***************************************!*\
  !*** ./src/utils/unit-conversions.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   convertArea: () => (/* binding */ convertArea),\n/* harmony export */   convertFromMm: () => (/* binding */ convertFromMm),\n/* harmony export */   convertUnit: () => (/* binding */ convertUnit),\n/* harmony export */   formatWithUnit: () => (/* binding */ formatWithUnit),\n/* harmony export */   getUnitDisplayName: () => (/* binding */ getUnitDisplayName),\n/* harmony export */   getUnitPrecision: () => (/* binding */ getUnitPrecision),\n/* harmony export */   getUnitShortName: () => (/* binding */ getUnitShortName),\n/* harmony export */   getUnitStep: () => (/* binding */ getUnitStep),\n/* harmony export */   isImperialUnit: () => (/* binding */ isImperialUnit),\n/* harmony export */   isMetricUnit: () => (/* binding */ isMetricUnit),\n/* harmony export */   normalizeToMm: () => (/* binding */ normalizeToMm)\n/* harmony export */ });\n// Convert-units doesn't include all our units, so we'll create our own conversion system\nconst UNIT_TO_METERS = {\n    mm: 0.001,\n    cm: 0.01,\n    m: 1,\n    in: 0.0254,\n    ft: 0.3048\n};\nconst UNIT_TO_MM = {\n    mm: 1,\n    cm: 10,\n    m: 1000,\n    in: 25.4,\n    ft: 304.8\n};\n/**\r\n * Convert a value from one unit to another\r\n */ function convertUnit(value, fromUnit, toUnit) {\n    if (fromUnit === toUnit) return value;\n    // Convert to meters first, then to target unit\n    const valueInMeters = value * UNIT_TO_METERS[fromUnit];\n    const convertedValue = valueInMeters / UNIT_TO_METERS[toUnit];\n    return convertedValue;\n}\n/**\r\n * Convert area from one unit to another (squared units)\r\n */ function convertArea(area, fromUnit, toUnit) {\n    if (fromUnit === toUnit) return area;\n    const conversionFactor = UNIT_TO_METERS[fromUnit] / UNIT_TO_METERS[toUnit];\n    return area * (conversionFactor * conversionFactor);\n}\n/**\r\n * Normalize all measurements to millimeters for consistent calculations\r\n */ function normalizeToMm(value, unit) {\n    return value * UNIT_TO_MM[unit];\n}\n/**\r\n * Convert from millimeters to specified unit\r\n */ function convertFromMm(value, unit) {\n    return value / UNIT_TO_MM[unit];\n}\n/**\r\n * Get display name for unit\r\n */ function getUnitDisplayName(unit, plural = false) {\n    const names = {\n        mm: plural ? \"millimeters\" : \"millimeter\",\n        cm: plural ? \"centimeters\" : \"centimeter\",\n        m: plural ? \"meters\" : \"meter\",\n        in: plural ? \"inches\" : \"inch\",\n        ft: plural ? \"feet\" : \"foot\"\n    };\n    return names[unit];\n}\n/**\r\n * Get short display name for unit\r\n */ function getUnitShortName(unit) {\n    return unit;\n}\n/**\r\n * Format a number with unit for display\r\n */ function formatWithUnit(value, unit, decimals = 2) {\n    const formattedValue = value.toFixed(decimals).replace(/\\\\.?0+$/, \"\");\n    return `${formattedValue} ${unit}`;\n}\n/**\r\n * Get appropriate precision based on unit\r\n */ function getUnitPrecision(unit) {\n    switch(unit){\n        case \"mm\":\n            return 0;\n        case \"cm\":\n            return 1;\n        case \"m\":\n            return 2;\n        case \"in\":\n            return 2;\n        case \"ft\":\n            return 2;\n        default:\n            return 2;\n    }\n}\n/**\r\n * Check if unit is metric\r\n */ function isMetricUnit(unit) {\n    return [\n        \"mm\",\n        \"cm\",\n        \"m\"\n    ].includes(unit);\n}\n/**\r\n * Check if unit is imperial\r\n */ function isImperialUnit(unit) {\n    return [\n        \"in\",\n        \"ft\"\n    ].includes(unit);\n}\n/**\r\n * Get suggested step value for input based on unit\r\n */ function getUnitStep(unit) {\n    switch(unit){\n        case \"mm\":\n            return 1;\n        case \"cm\":\n            return 0.1;\n        case \"m\":\n            return 0.01;\n        case \"in\":\n            return 0.1;\n        case \"ft\":\n            return 0.1;\n        default:\n            return 0.1;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9zcmMvdXRpbHMvdW5pdC1jb252ZXJzaW9ucy50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUdBLHlGQUF5RjtBQUN6RixNQUFNQSxpQkFBaUI7SUFDckJDLElBQUk7SUFDSkMsSUFBSTtJQUNKQyxHQUFHO0lBQ0hDLElBQUk7SUFDSkMsSUFBSTtBQUNOO0FBRUEsTUFBTUMsYUFBYTtJQUNqQkwsSUFBSTtJQUNKQyxJQUFJO0lBQ0pDLEdBQUc7SUFDSEMsSUFBSTtJQUNKQyxJQUFJO0FBQ047QUFFQTs7Q0FFQyxHQUNNLFNBQVNFLFlBQVlDLEtBQWEsRUFBRUMsUUFBYyxFQUFFQyxNQUFZO0lBQ3JFLElBQUlELGFBQWFDLFFBQVEsT0FBT0Y7SUFFaEMsK0NBQStDO0lBQy9DLE1BQU1HLGdCQUFnQkgsUUFBUVIsY0FBYyxDQUFDUyxTQUFTO0lBQ3RELE1BQU1HLGlCQUFpQkQsZ0JBQWdCWCxjQUFjLENBQUNVLE9BQU87SUFFN0QsT0FBT0U7QUFDVDtBQUVBOztDQUVDLEdBQ00sU0FBU0MsWUFBWUMsSUFBWSxFQUFFTCxRQUFjLEVBQUVDLE1BQVk7SUFDcEUsSUFBSUQsYUFBYUMsUUFBUSxPQUFPSTtJQUVoQyxNQUFNQyxtQkFBbUJmLGNBQWMsQ0FBQ1MsU0FBUyxHQUFHVCxjQUFjLENBQUNVLE9BQU87SUFDMUUsT0FBT0ksT0FBUUMsQ0FBQUEsbUJBQW1CQSxnQkFBZTtBQUNuRDtBQUVBOztDQUVDLEdBQ00sU0FBU0MsY0FBY1IsS0FBYSxFQUFFUyxJQUFVO0lBQ3JELE9BQU9ULFFBQVFGLFVBQVUsQ0FBQ1csS0FBSztBQUNqQztBQUVBOztDQUVDLEdBQ00sU0FBU0MsY0FBY1YsS0FBYSxFQUFFUyxJQUFVO0lBQ3JELE9BQU9ULFFBQVFGLFVBQVUsQ0FBQ1csS0FBSztBQUNqQztBQUVBOztDQUVDLEdBQ00sU0FBU0UsbUJBQW1CRixJQUFVLEVBQUVHLFNBQVMsS0FBSztJQUMzRCxNQUFNQyxRQUFRO1FBQ1pwQixJQUFJbUIsU0FBUyxnQkFBZ0I7UUFDN0JsQixJQUFJa0IsU0FBUyxnQkFBZ0I7UUFDN0JqQixHQUFHaUIsU0FBUyxXQUFXO1FBQ3ZCaEIsSUFBSWdCLFNBQVMsV0FBVztRQUN4QmYsSUFBSWUsU0FBUyxTQUFTO0lBQ3hCO0lBRUEsT0FBT0MsS0FBSyxDQUFDSixLQUFLO0FBQ3BCO0FBRUE7O0NBRUMsR0FDTSxTQUFTSyxpQkFBaUJMLElBQVU7SUFDekMsT0FBT0E7QUFDVDtBQUVBOztDQUVDLEdBQ00sU0FBU00sZUFBZWYsS0FBYSxFQUFFUyxJQUFVLEVBQUVPLFdBQVcsQ0FBQztJQUNwRSxNQUFNQyxpQkFBaUJqQixNQUFNa0IsT0FBTyxDQUFDRixVQUFVRyxPQUFPLENBQUMsV0FBVztJQUNsRSxPQUFPLENBQUMsRUFBRUYsZUFBZSxDQUFDLEVBQUVSLEtBQUssQ0FBQztBQUNwQztBQUVBOztDQUVDLEdBQ00sU0FBU1csaUJBQWlCWCxJQUFVO0lBQ3pDLE9BQVFBO1FBQ04sS0FBSztZQUNILE9BQU87UUFDVCxLQUFLO1lBQ0gsT0FBTztRQUNULEtBQUs7WUFDSCxPQUFPO1FBQ1QsS0FBSztZQUNILE9BQU87UUFDVCxLQUFLO1lBQ0gsT0FBTztRQUNUO1lBQ0UsT0FBTztJQUNYO0FBQ0Y7QUFFQTs7Q0FFQyxHQUNNLFNBQVNZLGFBQWFaLElBQVU7SUFDckMsT0FBTztRQUFDO1FBQU07UUFBTTtLQUFJLENBQUNhLFFBQVEsQ0FBQ2I7QUFDcEM7QUFFQTs7Q0FFQyxHQUNNLFNBQVNjLGVBQWVkLElBQVU7SUFDdkMsT0FBTztRQUFDO1FBQU07S0FBSyxDQUFDYSxRQUFRLENBQUNiO0FBQy9CO0FBRUE7O0NBRUMsR0FDTSxTQUFTZSxZQUFZZixJQUFVO0lBQ3BDLE9BQVFBO1FBQ04sS0FBSztZQUNILE9BQU87UUFDVCxLQUFLO1lBQ0gsT0FBTztRQUNULEtBQUs7WUFDSCxPQUFPO1FBQ1QsS0FBSztZQUNILE9BQU87UUFDVCxLQUFLO1lBQ0gsT0FBTztRQUNUO1lBQ0UsT0FBTztJQUNYO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9sYXktaXQtcmlnaHQvLi9zcmMvdXRpbHMvdW5pdC1jb252ZXJzaW9ucy50cz8zY2NmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjb252ZXJ0IGZyb20gJ2NvbnZlcnQtdW5pdHMnXHJcbmltcG9ydCB0eXBlIHsgVW5pdCB9IGZyb20gJ0AvdHlwZXMnXHJcblxyXG4vLyBDb252ZXJ0LXVuaXRzIGRvZXNuJ3QgaW5jbHVkZSBhbGwgb3VyIHVuaXRzLCBzbyB3ZSdsbCBjcmVhdGUgb3VyIG93biBjb252ZXJzaW9uIHN5c3RlbVxyXG5jb25zdCBVTklUX1RPX01FVEVSUyA9IHtcclxuICBtbTogMC4wMDEsXHJcbiAgY206IDAuMDEsXHJcbiAgbTogMSxcclxuICBpbjogMC4wMjU0LFxyXG4gIGZ0OiAwLjMwNDhcclxufSBhcyBjb25zdFxyXG5cclxuY29uc3QgVU5JVF9UT19NTSA9IHtcclxuICBtbTogMSxcclxuICBjbTogMTAsXHJcbiAgbTogMTAwMCxcclxuICBpbjogMjUuNCxcclxuICBmdDogMzA0LjhcclxufSBhcyBjb25zdFxyXG5cclxuLyoqXHJcbiAqIENvbnZlcnQgYSB2YWx1ZSBmcm9tIG9uZSB1bml0IHRvIGFub3RoZXJcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBjb252ZXJ0VW5pdCh2YWx1ZTogbnVtYmVyLCBmcm9tVW5pdDogVW5pdCwgdG9Vbml0OiBVbml0KTogbnVtYmVyIHtcclxuICBpZiAoZnJvbVVuaXQgPT09IHRvVW5pdCkgcmV0dXJuIHZhbHVlXHJcbiAgXHJcbiAgLy8gQ29udmVydCB0byBtZXRlcnMgZmlyc3QsIHRoZW4gdG8gdGFyZ2V0IHVuaXRcclxuICBjb25zdCB2YWx1ZUluTWV0ZXJzID0gdmFsdWUgKiBVTklUX1RPX01FVEVSU1tmcm9tVW5pdF1cclxuICBjb25zdCBjb252ZXJ0ZWRWYWx1ZSA9IHZhbHVlSW5NZXRlcnMgLyBVTklUX1RPX01FVEVSU1t0b1VuaXRdXHJcbiAgXHJcbiAgcmV0dXJuIGNvbnZlcnRlZFZhbHVlXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDb252ZXJ0IGFyZWEgZnJvbSBvbmUgdW5pdCB0byBhbm90aGVyIChzcXVhcmVkIHVuaXRzKVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGNvbnZlcnRBcmVhKGFyZWE6IG51bWJlciwgZnJvbVVuaXQ6IFVuaXQsIHRvVW5pdDogVW5pdCk6IG51bWJlciB7XHJcbiAgaWYgKGZyb21Vbml0ID09PSB0b1VuaXQpIHJldHVybiBhcmVhXHJcbiAgXHJcbiAgY29uc3QgY29udmVyc2lvbkZhY3RvciA9IFVOSVRfVE9fTUVURVJTW2Zyb21Vbml0XSAvIFVOSVRfVE9fTUVURVJTW3RvVW5pdF1cclxuICByZXR1cm4gYXJlYSAqIChjb252ZXJzaW9uRmFjdG9yICogY29udmVyc2lvbkZhY3RvcilcclxufVxyXG5cclxuLyoqXHJcbiAqIE5vcm1hbGl6ZSBhbGwgbWVhc3VyZW1lbnRzIHRvIG1pbGxpbWV0ZXJzIGZvciBjb25zaXN0ZW50IGNhbGN1bGF0aW9uc1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIG5vcm1hbGl6ZVRvTW0odmFsdWU6IG51bWJlciwgdW5pdDogVW5pdCk6IG51bWJlciB7XHJcbiAgcmV0dXJuIHZhbHVlICogVU5JVF9UT19NTVt1bml0XVxyXG59XHJcblxyXG4vKipcclxuICogQ29udmVydCBmcm9tIG1pbGxpbWV0ZXJzIHRvIHNwZWNpZmllZCB1bml0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gY29udmVydEZyb21NbSh2YWx1ZTogbnVtYmVyLCB1bml0OiBVbml0KTogbnVtYmVyIHtcclxuICByZXR1cm4gdmFsdWUgLyBVTklUX1RPX01NW3VuaXRdXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBHZXQgZGlzcGxheSBuYW1lIGZvciB1bml0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0VW5pdERpc3BsYXlOYW1lKHVuaXQ6IFVuaXQsIHBsdXJhbCA9IGZhbHNlKTogc3RyaW5nIHtcclxuICBjb25zdCBuYW1lcyA9IHtcclxuICAgIG1tOiBwbHVyYWwgPyAnbWlsbGltZXRlcnMnIDogJ21pbGxpbWV0ZXInLFxyXG4gICAgY206IHBsdXJhbCA/ICdjZW50aW1ldGVycycgOiAnY2VudGltZXRlcicsXHJcbiAgICBtOiBwbHVyYWwgPyAnbWV0ZXJzJyA6ICdtZXRlcicsXHJcbiAgICBpbjogcGx1cmFsID8gJ2luY2hlcycgOiAnaW5jaCcsXHJcbiAgICBmdDogcGx1cmFsID8gJ2ZlZXQnIDogJ2Zvb3QnXHJcbiAgfVxyXG4gIFxyXG4gIHJldHVybiBuYW1lc1t1bml0XVxyXG59XHJcblxyXG4vKipcclxuICogR2V0IHNob3J0IGRpc3BsYXkgbmFtZSBmb3IgdW5pdFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFVuaXRTaG9ydE5hbWUodW5pdDogVW5pdCk6IHN0cmluZyB7XHJcbiAgcmV0dXJuIHVuaXRcclxufVxyXG5cclxuLyoqXHJcbiAqIEZvcm1hdCBhIG51bWJlciB3aXRoIHVuaXQgZm9yIGRpc3BsYXlcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXRXaXRoVW5pdCh2YWx1ZTogbnVtYmVyLCB1bml0OiBVbml0LCBkZWNpbWFscyA9IDIpOiBzdHJpbmcge1xyXG4gIGNvbnN0IGZvcm1hdHRlZFZhbHVlID0gdmFsdWUudG9GaXhlZChkZWNpbWFscykucmVwbGFjZSgvXFxcXC4/MCskLywgJycpXHJcbiAgcmV0dXJuIGAke2Zvcm1hdHRlZFZhbHVlfSAke3VuaXR9YFxyXG59XHJcblxyXG4vKipcclxuICogR2V0IGFwcHJvcHJpYXRlIHByZWNpc2lvbiBiYXNlZCBvbiB1bml0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0VW5pdFByZWNpc2lvbih1bml0OiBVbml0KTogbnVtYmVyIHtcclxuICBzd2l0Y2ggKHVuaXQpIHtcclxuICAgIGNhc2UgJ21tJzpcclxuICAgICAgcmV0dXJuIDBcclxuICAgIGNhc2UgJ2NtJzpcclxuICAgICAgcmV0dXJuIDFcclxuICAgIGNhc2UgJ20nOlxyXG4gICAgICByZXR1cm4gMlxyXG4gICAgY2FzZSAnaW4nOlxyXG4gICAgICByZXR1cm4gMlxyXG4gICAgY2FzZSAnZnQnOlxyXG4gICAgICByZXR1cm4gMlxyXG4gICAgZGVmYXVsdDpcclxuICAgICAgcmV0dXJuIDJcclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDaGVjayBpZiB1bml0IGlzIG1ldHJpY1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGlzTWV0cmljVW5pdCh1bml0OiBVbml0KTogYm9vbGVhbiB7XHJcbiAgcmV0dXJuIFsnbW0nLCAnY20nLCAnbSddLmluY2x1ZGVzKHVuaXQpXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDaGVjayBpZiB1bml0IGlzIGltcGVyaWFsXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gaXNJbXBlcmlhbFVuaXQodW5pdDogVW5pdCk6IGJvb2xlYW4ge1xyXG4gIHJldHVybiBbJ2luJywgJ2Z0J10uaW5jbHVkZXModW5pdClcclxufVxyXG5cclxuLyoqXHJcbiAqIEdldCBzdWdnZXN0ZWQgc3RlcCB2YWx1ZSBmb3IgaW5wdXQgYmFzZWQgb24gdW5pdFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFVuaXRTdGVwKHVuaXQ6IFVuaXQpOiBudW1iZXIge1xyXG4gIHN3aXRjaCAodW5pdCkge1xyXG4gICAgY2FzZSAnbW0nOlxyXG4gICAgICByZXR1cm4gMVxyXG4gICAgY2FzZSAnY20nOlxyXG4gICAgICByZXR1cm4gMC4xXHJcbiAgICBjYXNlICdtJzpcclxuICAgICAgcmV0dXJuIDAuMDFcclxuICAgIGNhc2UgJ2luJzpcclxuICAgICAgcmV0dXJuIDAuMVxyXG4gICAgY2FzZSAnZnQnOlxyXG4gICAgICByZXR1cm4gMC4xXHJcbiAgICBkZWZhdWx0OlxyXG4gICAgICByZXR1cm4gMC4xXHJcbiAgfVxyXG59XG4iXSwibmFtZXMiOlsiVU5JVF9UT19NRVRFUlMiLCJtbSIsImNtIiwibSIsImluIiwiZnQiLCJVTklUX1RPX01NIiwiY29udmVydFVuaXQiLCJ2YWx1ZSIsImZyb21Vbml0IiwidG9Vbml0IiwidmFsdWVJbk1ldGVycyIsImNvbnZlcnRlZFZhbHVlIiwiY29udmVydEFyZWEiLCJhcmVhIiwiY29udmVyc2lvbkZhY3RvciIsIm5vcm1hbGl6ZVRvTW0iLCJ1bml0IiwiY29udmVydEZyb21NbSIsImdldFVuaXREaXNwbGF5TmFtZSIsInBsdXJhbCIsIm5hbWVzIiwiZ2V0VW5pdFNob3J0TmFtZSIsImZvcm1hdFdpdGhVbml0IiwiZGVjaW1hbHMiLCJmb3JtYXR0ZWRWYWx1ZSIsInRvRml4ZWQiLCJyZXBsYWNlIiwiZ2V0VW5pdFByZWNpc2lvbiIsImlzTWV0cmljVW5pdCIsImluY2x1ZGVzIiwiaXNJbXBlcmlhbFVuaXQiLCJnZXRVbml0U3RlcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./src/utils/unit-conversions.ts\n");

/***/ })

};
;